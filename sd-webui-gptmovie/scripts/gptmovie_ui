import requests
import pandas as pd
import gradio as gr

import modules.generation_parameters_copypaste as parameters_copypaste
from modules import script_callbacks, ui_common

gtpmovie_server_ulr = "http://127.0.0.1:9003"
gtpmovie_api_sdtask_list_path = "/xvr/api/movie/sdtask/list"

#GPTMovie-从数据库读取SD任务表信息
def get_shopplan_from_db():
    shotplan_list = []
    url = gtpmovie_server_ulr + gtpmovie_api_sdtask_list_path
    params = {
        "uobject_list" : 0
     }
    response = requests.get(url, params=params)
    shotplan_list = response.json()["shotplan_list"]
    return shotplan_list

#GPTMovie-获取任务选中的提示词信息，为填入SD提示词框做准备
def get_dataframe_selected_value(evt:gr.SelectData):
    ui_common.gptmovie_sdtask_prompt = evt.value
    print("GPTMovie-the ui_plan_id:{},ui_task_type:{}, ui_prompt:{}, ui_uuid:{}".format(ui_common.gptmovie_sdtask_planid, ui_common.gptmovie_sdtask_tasktype,
                                                                                        ui_common.gptmovie_sdtask_prompt, ui_common.gptmovie_sdtask_uuid))
    return evt.value

#GPTMovie-set prompt
def set_ui_prompt_value(text):
    ui_common.gptmovie_sdtask_prompt = text

#GPTMovie-在人序列表中选择某项待处理任务，获得待处理任务的描述和提示词信息
def clickCell(dataFrame, evt:gr.SelectData):
    task_type = "actors"
    ui_common.gptmovie_sdtask_tasktype = 1
    if evt.index[1] == 3:
        task_type = "fplaces"
        ui_common.gptmovie_sdtask_tasktype = 2
    elif evt.index[1] == 4:
        task_type = "posters"
        ui_common.gptmovie_sdtask_tasktype = 3
    elif evt.index[1] == 5:
        task_type = "shots"
        ui_common.gptmovie_sdtask_tasktype = 4
    
    ui_common.gptmovie_sdtask_planid = plan_id = dataFrame[evt.index[0]][0]
    subitem_list = get_shotplan_subitem_list(ui_common.gptmovie_sdtask_planid, task_type)
    print("GPTMovie-the plan_id:{},task_type:{},ui_plan_id:{},ui_task_type:{}".format(plan_id, task_type, ui_common.gptmovie_sdtask_planid, ui_common.gptmovie_sdtask_tasktype))
    print("GPTMovie-subitem_list:")
    print(subitem_list)
    return subitem_list

#GPTMovie-TODO在人序列表中选择某项待处理任务，获得待处理任务的描述和提示词信息
def create_dataframe(dataFrame, evt:gr.SelectData):
    task_type = "actors"
    ui_common.gptmovie_sdtask_tasktype = 1
    if evt.index[1] == 3:
        task_type = "fplaces"
        ui_common.gptmovie_sdtask_tasktype = 2
    elif evt.index[1] == 4:
        task_type = "posters"
        ui_common.gptmovie_sdtask_tasktype = 3
    elif evt.index[1] == 5:
        task_type = "shots"
        ui_common.gptmovie_sdtask_tasktype = 4

    plan_id = dataFrame[evt.index[0]][0]
    ui_common.gptmovie_sdtask_planid = dataFrame[evt.index[0]][0]
    subitm_list = get_shotplan_subitem_list(plan_id, task_type)  
    print("GPTMovie-the plan_id:{},task_type:{},ui_plan_id:{},ui_task_type:{}".format(plan_id, task_type, ui_common.gptmovie_sdtask_planid, ui_common.gptmovie_sdtask_tasktype))
    if task_type=='shots':
        return gr.DataFrame(
            value = subitm_list,
            headers=["场号","镜号","提示词(prompt)","备注(notes)"],
            datatype=["number","number","str","str"],
            visible=True,
            interactive=False,)
    else:
        return gr.DataFrame(
            value = subitm_list,
            headers=["提示词(prompt)","备注(notes)"],
            datatype=["str","str"],
            visible=True,
            interactive=False,)

#GPTMovie-获取SD任务列表时，根据task_status字段判断返回处理状态 1待处理，2已处理，3其他，如：无状态信息
def checkStatus(list, task_type):
    if len(list) == 0:
        return 3
    if task_type == "shots":
        for it in list:
            if "shots" in it:
                for subit in it:
                    if "task_status" in subit:
                        if subit['task_status'] == 1:
                            return 1
                        elif subit['task_status'] == 2:
                            return 2
    else:
        for it in list:
            if "task_status" in it:
                if it['task_status'] == 1:
                    return 1
                elif it['task_status'] == 2:
                    return 2
            else:
                return 3
    return 3

#GPTMovie-获取提示词信息列表
def get_shotplan_subitem_list(plan_id, task_type):
    shotplan_list = get_shopplan_from_db()
    subitem_list = []
    for shotplan in shotplan_list:
        if shotplan["plan_id"] == plan_id:
            if task_type == "posters":
                if len(shotplan["posters"]) > 0 :
                    for itm in shotplan["posters"]:
                        item = []
                        if "prompt" in itm:
                            if len(itm["prompt"]) == 0:
                                item.append(itm["notes"])
                            elif itm["prompt"] == "TBD":
                                item.append(itm["notes"])
                            else:
                                item.append(itm["prompt"])
                        else:
                            item.append("空")
                        if "notes" in itm:
                            item.append(itm["notes"])
                        else:
                            item.append("空")
                        if itm['task_status'] == 1:
                            subitem_list.append(item)
                        ui_common.gptmovie_sdtask_uuid = itm['uuid']
                    if len(subitem_list) == 0:
                        subitem_list.append(["空","空"])
                else:
                    item = ["空","空"]
                    subitem_list.append(item)
            elif task_type == "actors":
                if len(shotplan["actors"]) > 0 :
                    for itm in shotplan["actors"]:
                        item = []
                        if "prompt" in itm:
                            if len(itm["prompt"]) == 0:
                                item.append(itm["notes"])
                            elif itm["prompt"] == "TBD":
                                item.append(itm["notes"])
                            else:
                                item.append(itm["prompt"])
                        else:
                            item.append("空")
                        if "notes" in itm:
                            item.append(itm["notes"])
                        else:
                            item.append("空")
                        if itm['task_status'] == 1:
                            subitem_list.append(item)
                        ui_common.gptmovie_sdtask_uuid = itm['uuid']
                    if len(subitem_list) == 0:
                        subitem_list.append(["空","空"])
                else:
                    item = ["空","空"]
                    subitem_list.append(item)
            elif task_type == "fplaces":
                if len(shotplan["fplaces"]) > 0 :
                    for itm in shotplan["fplaces"]:
                        item = []
                        if "prompt" in itm:
                            if len(itm["prompt"]) == 0:
                                item.append(itm["notes"])
                            elif itm["prompt"] == "TBD":
                                item.append(itm["notes"])
                            else:
                                item.append(itm["prompt"])
                        else:
                            item.append("空")
                        if "notes" in itm:
                            item.append(itm["notes"])
                        else:
                            item.append("空")
                        if itm['task_status'] == 1:
                            subitem_list.append(item)
                        ui_common.gptmovie_sdtask_uuid = itm['uuid']
                    if len(subitem_list) == 0:
                        subitem_list.append(["空","空"])
                else:
                    item = ["空","空"]
                    subitem_list.append(item)
            elif task_type == "shots":
                if len(shotplan["shots"]) > 0 :
                    for itm in shotplan["shots"]:
                        if "shots" in itm and "plot_index" in itm:
                            plot_index = itm["plot_index"]
                            for subitm in itm["shots"]:
                                item = []
                                item.append(plot_index)
                                if "shot_id" in subitm:
                                    item.append(subitm["shot_id"])
                                else:
                                    item.append(0)
                                if "prompt" in subitm:
                                    if len(subitm["prompt"]) == 0:
                                        item.append(subitm["notes"])
                                    elif subitm["prompt"] == "TBD":
                                        item.append(subitm["notes"])
                                    else:
                                        item.append(subitm["prompt"])
                                else:
                                    item.append("空")
                                if "notes" in subitm:
                                    item.append(subitm["notes"])
                                else:
                                    item.append("空")
                                if subitm['task_status'] == 1:
                                    subitem_list.append(item)
                                ui_common.gptmovie_sdtask_uuid = subitm['uuid']
                            if len(subitem_list) == 0:
                                subitem_list.append([0,0,"空","空"])
                        else:
                            item = [0,0,"空","空"]
                            subitem_list.append(item)
                else:
                    item = [0,0,"空","空"]
                    subitem_list.append(item)
            else:
                item = [0,0,"空","空"]
                subitem_list.append(item)
    return subitem_list

#GPTMovie-获得SD任务列表，只返回海报，分镜头，人物和场地中状态task_status为1还没被处理需要生成图片的项
def get_shotplan_list():
    shotplan_list = get_shopplan_from_db()
    dataframe_list = []
    for shotplan in shotplan_list:
        if checkStatus(shotplan["posters"],"posters") == 1 or checkStatus(shotplan["shots"],"shots") == 1 or checkStatus(shotplan["fplaces"],"fplaces") == 1 or checkStatus(shotplan["actors"],"actors") == 1:
            item = []
            item.append(shotplan["plan_id"])
            item.append(shotplan["title"])
            item.append(checkStatus(shotplan["actors"],"actors"))
            item.append(checkStatus(shotplan["fplaces"],"fplaces"))
            item.append(checkStatus(shotplan["posters"],"posters"))
            item.append(checkStatus(shotplan["shots"],"shots"))
            dataframe_list.append(item)
    if len(dataframe_list) == 0:
        item = []
        item.append(0)
        item.append("无待处理任务")
        item.append(0)
        item.append(0)
        item.append(0)
        item.append(0)
        dataframe_list.append(item)
    print(dataframe_list)
    return dataframe_list

def on_ui_tabs():
     with gr.Blocks(analytics_enabled=False) as gptmovie:
        with gr.Row():
            dataFrame = gr.DataFrame(
            headers=["编号","片名","演员","场景","海报","镜头"],
            datatype=["number","str", "number", "number", "number", "number"],type="array",interactive=False,)
        with gr.Row():
           btn1 = gr.Button("查询")
           btn1.click(fn=get_shotplan_list,outputs=dataFrame)
        with gr.Row():
            dataFrame_poster = gr.DataFrame(
            visible=True,
            interactive=False,)
        with gr.Row():
             gptmove_prompt_info = gr.Textbox(value="2boys", visible=False, elem_id="gptmove_prompt_info")
             buttons = parameters_copypaste.create_buttons(["txt2img", "img2img"])
             
             for tabname, button in buttons.items():
                    parameters_copypaste.register_paste_params_button(parameters_copypaste.ParamBinding(
                        paste_button=button, tabname=tabname,source_text_component=gptmove_prompt_info,
                    ))
        dataFrame.select(clickCell, inputs=[dataFrame], outputs=dataFrame_poster)
        dataFrame_poster.select(get_dataframe_selected_value, outputs=gptmove_prompt_info)
        return (gptmovie, "GPTMovie","GPTMovie"),

script_callbacks.on_ui_tabs(on_ui_tabs)
